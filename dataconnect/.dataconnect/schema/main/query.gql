extend type Query {
  """
  ✨ Look up a single `Article` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  article(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Article_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Article_FirstRow
  ): Article @fdc_generated(from: "Article", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ArticleCategory` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  articleCategory(
    """
    The key used to identify the object.
    """
    key: ArticleCategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ArticleCategory_FirstRow
  ): ArticleCategory @fdc_generated(from: "ArticleCategory", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Category` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  category(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow
  ): Category @fdc_generated(from: "Category", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NewsSource` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  newsSource(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: NewsSource_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NewsSource_FirstRow
  ): NewsSource @fdc_generated(from: "NewsSource", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `SavedArticle` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  savedArticle(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SavedArticle_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SavedArticle_FirstRow
  ): SavedArticle @fdc_generated(from: "SavedArticle", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Article` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  articles(
    """
    Filter condition to narrow down the query results.
    """
    where: Article_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Article_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Article_Having
  ): [Article!]! @fdc_generated(from: "Article", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ArticleCategory` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  articleCategories(
    """
    Filter condition to narrow down the query results.
    """
    where: ArticleCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ArticleCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ArticleCategory_Having
  ): [ArticleCategory!]! @fdc_generated(from: "ArticleCategory", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Category` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  categories(
    """
    Filter condition to narrow down the query results.
    """
    where: Category_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Category_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Category_Having
  ): [Category!]! @fdc_generated(from: "Category", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NewsSource` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  newsSources(
    """
    Filter condition to narrow down the query results.
    """
    where: NewsSource_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NewsSource_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: NewsSource_Having
  ): [NewsSource!]! @fdc_generated(from: "NewsSource", purpose: QUERY_MULTIPLE)
  """
  ✨ List `SavedArticle` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  savedArticles(
    """
    Filter condition to narrow down the query results.
    """
    where: SavedArticle_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SavedArticle_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: SavedArticle_Having
  ): [SavedArticle!]! @fdc_generated(from: "SavedArticle", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
