extend type Mutation {
  """
  ✨ Insert a single `Article` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  article_insert(
    """
    Data object to insert into the table.
    """
    data: Article_Data!
  ): Article_KeyOutput! @fdc_generated(from: "Article", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `ArticleCategory` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  articleCategory_insert(
    """
    Data object to insert into the table.
    """
    data: ArticleCategory_Data!
  ): ArticleCategory_KeyOutput! @fdc_generated(from: "ArticleCategory", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Category` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  category_insert(
    """
    Data object to insert into the table.
    """
    data: Category_Data!
  ): Category_KeyOutput! @fdc_generated(from: "Category", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `NewsSource` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  newsSource_insert(
    """
    Data object to insert into the table.
    """
    data: NewsSource_Data!
  ): NewsSource_KeyOutput! @fdc_generated(from: "NewsSource", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `SavedArticle` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  savedArticle_insert(
    """
    Data object to insert into the table.
    """
    data: SavedArticle_Data!
  ): SavedArticle_KeyOutput! @fdc_generated(from: "SavedArticle", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Article` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  article_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Article_Data!]!
  ): [Article_KeyOutput!]! @fdc_generated(from: "Article", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `ArticleCategory` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  articleCategory_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [ArticleCategory_Data!]!
  ): [ArticleCategory_KeyOutput!]! @fdc_generated(from: "ArticleCategory", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Category` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  category_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Category_Data!]!
  ): [Category_KeyOutput!]! @fdc_generated(from: "Category", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `NewsSource` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  newsSource_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [NewsSource_Data!]!
  ): [NewsSource_KeyOutput!]! @fdc_generated(from: "NewsSource", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `SavedArticle` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  savedArticle_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [SavedArticle_Data!]!
  ): [SavedArticle_KeyOutput!]! @fdc_generated(from: "SavedArticle", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Article` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Article`.
  """
  article_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Article_Data!
  ): Article_KeyOutput! @fdc_generated(from: "Article", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `ArticleCategory` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ArticleCategory`.
  """
  articleCategory_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: ArticleCategory_Data!
  ): ArticleCategory_KeyOutput! @fdc_generated(from: "ArticleCategory", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Category` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Category`.
  """
  category_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Category_Data!
  ): Category_KeyOutput! @fdc_generated(from: "Category", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `NewsSource` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `NewsSource`.
  """
  newsSource_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: NewsSource_Data!
  ): NewsSource_KeyOutput! @fdc_generated(from: "NewsSource", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `SavedArticle` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `SavedArticle`.
  """
  savedArticle_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: SavedArticle_Data!
  ): SavedArticle_KeyOutput! @fdc_generated(from: "SavedArticle", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Article` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Article`.
  """
  article_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Article_Data!]!
  ): [Article_KeyOutput!]! @fdc_generated(from: "Article", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `ArticleCategory` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ArticleCategory`.
  """
  articleCategory_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [ArticleCategory_Data!]!
  ): [ArticleCategory_KeyOutput!]! @fdc_generated(from: "ArticleCategory", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Category` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Category`.
  """
  category_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Category_Data!]!
  ): [Category_KeyOutput!]! @fdc_generated(from: "Category", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `NewsSource` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `NewsSource`.
  """
  newsSource_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [NewsSource_Data!]!
  ): [NewsSource_KeyOutput!]! @fdc_generated(from: "NewsSource", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `SavedArticle` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `SavedArticle`.
  """
  savedArticle_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [SavedArticle_Data!]!
  ): [SavedArticle_KeyOutput!]! @fdc_generated(from: "SavedArticle", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Article` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Article` or `null` if not found.
  """
  article_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Article_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Article_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Article_Data!
  ): Article_KeyOutput @fdc_generated(from: "Article", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `ArticleCategory` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `ArticleCategory` or `null` if not found.
  """
  articleCategory_update(
    """
    The key used to identify the object.
    """
    key: ArticleCategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ArticleCategory_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: ArticleCategory_Data!
  ): ArticleCategory_KeyOutput @fdc_generated(from: "ArticleCategory", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Category` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Category` or `null` if not found.
  """
  category_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Category_Data!
  ): Category_KeyOutput @fdc_generated(from: "Category", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `NewsSource` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `NewsSource` or `null` if not found.
  """
  newsSource_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: NewsSource_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NewsSource_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: NewsSource_Data!
  ): NewsSource_KeyOutput @fdc_generated(from: "NewsSource", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `SavedArticle` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `SavedArticle` or `null` if not found.
  """
  savedArticle_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SavedArticle_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SavedArticle_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: SavedArticle_Data!
  ): SavedArticle_KeyOutput @fdc_generated(from: "SavedArticle", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Article` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  article_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Article_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Article_Data!
  ): Int! @fdc_generated(from: "Article", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `ArticleCategory` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  articleCategory_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: ArticleCategory_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: ArticleCategory_Data!
  ): Int! @fdc_generated(from: "ArticleCategory", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Category` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  category_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Category_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Category_Data!
  ): Int! @fdc_generated(from: "Category", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `NewsSource` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  newsSource_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: NewsSource_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: NewsSource_Data!
  ): Int! @fdc_generated(from: "NewsSource", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `SavedArticle` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  savedArticle_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: SavedArticle_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: SavedArticle_Data!
  ): Int! @fdc_generated(from: "SavedArticle", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Article` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  article_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Article_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Article_FirstRow
  ): Article_KeyOutput @fdc_generated(from: "Article", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `ArticleCategory` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  articleCategory_delete(
    """
    The key used to identify the object.
    """
    key: ArticleCategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ArticleCategory_FirstRow
  ): ArticleCategory_KeyOutput @fdc_generated(from: "ArticleCategory", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Category` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  category_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow
  ): Category_KeyOutput @fdc_generated(from: "Category", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `NewsSource` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  newsSource_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: NewsSource_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NewsSource_FirstRow
  ): NewsSource_KeyOutput @fdc_generated(from: "NewsSource", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `SavedArticle` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  savedArticle_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SavedArticle_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SavedArticle_FirstRow
  ): SavedArticle_KeyOutput @fdc_generated(from: "SavedArticle", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Article` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  article_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Article_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Article", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `ArticleCategory` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  articleCategory_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: ArticleCategory_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "ArticleCategory", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Category` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  category_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Category_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Category", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `NewsSource` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  newsSource_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: NewsSource_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "NewsSource", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `SavedArticle` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  savedArticle_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: SavedArticle_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "SavedArticle", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
